extends layout

block title
	- import std.algorithm;
	- import std.array : join, split;
	- import std.conv : text;
	- import std.range;
	- import vibe.data.json;
	- import vibe.inet.url;
	- import vibe.textfilter.urlencode;
	- import dubregistry.viewutils;
	- import userman.controller;
	- title = "Package " ~ packageName ~ " version " ~ versionInfo["version"].get!string;
	- auto packageInfo = packinfo.info;

	- auto normalizedPackageName = packageName.splitter(':').front;
	- auto normalizedPackageURL = (req.tls ? "https://" : "http://") ~ req.host ~ "/packages/" ~ normalizedPackageName;

	- string logoURL = "/packages/" ~ normalizedPackageName ~ "/logo?s=" ~ packinfo.logo.toString;

	- string description = versionInfo["description"].opt!string;

	// facebook & co.
	meta(property="og:url", content="")
	meta(property="og:type", content="article")
	meta(property="og:title", content="Package #{normalizedPackageName} on DUB")
	meta(property="og:image", content=logoURL)
	meta(property="og:description", content=description)
	meta(property="og:site_name", content="DUB Package Registry")
	meta(property="og:locale", content="en_US")
	meta(property="article:author", content=user.fullName.length ? user.fullName : user.name)

	// twitter
	meta(name="twitter:card", content="summary")
	//- TODO: register dub twitter account
	meta(name="twitter:site", content="@D_Programming")
	meta(name="twitter:url", content=normalizedPackageURL)
	meta(name="twitter:title", content="Package #{normalizedPackageName} on DUB")
	meta(name="twitter:description", content=description)
	meta(name="twitter:image", content=logoURL)

	meta(name="theme-color", content="#B03931")
	meta(name="format-detection", content="telephone=no")
	meta(name="description", content=description)

block css
	link(rel="stylesheet", type="text/css", href="#{req.rootDir}styles/common.css")
	- if (readmeContents.length)
		link(rel="stylesheet", type="text/css", href="#{req.rootDir}styles/markdown.css")

block body
	.main
		- import vibe.data.bson;

		- if (packinfo.logo != BsonObjectID.init)
			img.packageLogo(src=logoURL, alt="#{normalizedPackageName} logo")

		- if(packageName.canFind(":"))
			- string url = req.rootDir ~ "packages/" ~ urlEncode(normalizedPackageName);
			h1.
				#[a.blind(href="#{url}")=packageInfo["name"].get!string]#{find(packageName, ":")} #[strong.badge #{versionInfo["version"].get!string}]
		- else
			h1 #{packageName} #[strong.badge #{versionInfo["version"].get!string}]

		p= versionInfo["description"].opt!string
		br
		p To use this package, run the following command in your project's root directory:
		.clipboard-pkg
			- string expr = versionInfo["version"].get!string;
			- if( !expr.startsWith("~") ) expr = "~>" ~ expr;
			.clipboard-pkg-row
				input(id="package-clipboard",value='dub add #{packageName}')
				button(class="btn-clipboard",data-clipboard-target="#package-clipboard")
					img(src="/images/clippy.svg", width=13, alt="Copy to clipboard")
		.clipboard-manual
			p
				strong Manual usage
				br
				| Put the following dependency into your project's dependences section:
			.clipboard-pkg
				.clipboard-pkg-row
					label.clipboard-pkg-title(for="package-clipboard-json") dub.json
					input(id="package-clipboard-json",value='"#{packageName}": "#{expr}"')
					button(class="btn-clipboard",data-clipboard-target="#package-clipboard-json")
						img(src="/images/clippy.svg", width=13, alt="Copy to clipboard")
				.clipboard-pkg-row
					label.clipboard-pkg-title(for="package-clipboard-sdl") dub.sdl
					input(id="package-clipboard-sdl",value='dependency "#{packageName}" version="#{expr}"')
					button(class="btn-clipboard",data-clipboard-target="#package-clipboard-sdl")
						img(src="/images/clippy.svg", width=13, alt="Copy to clipboard")

		- if (versionInfo["subPackages"].opt!(Json[]).length)
			- bool helpWrited = false;
			- foreach(sp; versionInfo["subPackages"])
				- if(sp.type == Json.Type.object && sp["description"].opt!string)
					- if(!helpWrited)
						- helpWrited = true;
						br
						p This package provides sub packages which can be used individually:
					p
						- auto depname = packageName ~ ":" ~ sp["name"].get!string;
						a.blind(href="#{req.rootDir}packages/#{urlEncode(depname)}")
							|= depname
						|= "- " ~ sp["description"].opt!string

		.subtabsHeader
			- if (readmeContents.length)
				a.tab(class=activeTab == "info" ? "active" : "", href="#{req.rootDir}packages/#{normalizedPackageName}?tab=info") Info
			- foreach (i, sample; sampleURLs)
				a.tab(class=activeTab == "sample_"~i.to!string ? "active" : "", href="#{req.rootDir}packages/#{normalizedPackageName}?tab=sample_#{i}")= sample
			- auto doc_url = packinfo.info["documentationURL"].get!string;
			- if (doc_url.length)
				a.tab.external(href=doc_url, target="_blank") Documentation
		- bool renderedTabContent;
		- if (activeTab == "info")
			- if (readmeContents.length)
				.repositoryReadme.markdown-body
					- import vibe.textfilter.markdown : MarkdownFlags, MarkdownSettings, filterMarkdown;
					- scope msettings = new MarkdownSettings;
					- msettings.flags = MarkdownFlags.backtickCodeBlocks|MarkdownFlags.noInlineHtml|MarkdownFlags.tables;
					- msettings.headingBaseLevel = 2;
					- msettings.urlFilter = &urlFilter;
					!= filterMarkdown(readmeContents, msettings)
			- else
				.repositoryReadme
			- renderedTabContent = true;
		- else
			- foreach (i, sample; sampleURLs)
				- if (activeTab == "sample_"~i.to!string)
					- renderedTabContent = true;
					include view_package.sample

		- if (!renderedTabContent)
			h3 Not Found

	.packageInfo
		ul.unmarkedList
			- if (user.id != User.ID.init)
				li#registredBy Registered by #[strong= user.fullName.length ? user.fullName : user.name]
			- if (packageInfo["versions"].get!(Json[]).length)
				li#latestVersion #[strong= versionInfo["version"].get!string] released #{formatFuzzyDate(versionInfo["date"])}
			- if (auto pr = "repository" in packageInfo)
				- string repo_kind = (*pr)["kind"].get!string;
				- string repo_path, repo_prefix;
				- repo_path = (*pr)["owner"].get!string~"/"~(*pr)["project"].get!string;
				- switch (repo_kind)
					- default: break;
					- case "bitbucket": repo_prefix = "https://bitbucket.org/"; break;
					- case "github": repo_prefix = "https://github.com/"; break;
					- case "gitlab": repo_prefix = "https://gitlab.com/"; break;
				li#repository
					a.blind(class=repo_kind, href="#{repo_prefix}#{repo_path}")= repo_path

			- if( auto ph = "homepage" in versionInfo )
				- auto hpage = URL(ph.get!string);
				li#homepage
					a.blind(href="#{hpage.toString}")= hpage.host ~ hpage.localURI

			- if( auto pl = "license" in versionInfo )
				li#license= pl.get!string

			- if( auto pl = "copyright" in versionInfo )
				li#copyright= pl.get!string

		- if (hasManagementAccess)
			//- TODO: make .actions not conditional on hasManagementAccess, instead have actions which are always there here too (either as a: button.large for actions or p.detail for descriptions)
			.actions
				- if (hasManagementAccess) /* check for the future when the upper hasManagementAccess is removed */
					a(href="#{req.rootDir}my_packages/#{normalizedPackageName}")
						button.primary.large Manage this Package
					- if (isMine)
						p.detail Change logo, categories and more.
					- else
						p.detail Shared with you

		dl
			- if( auto pa = "authors" in versionInfo )
				dt Authors:
				dd.wrap
					ul.authors.unmarkedList
						- foreach (author; pa.get!(Json[]))
							li= author.get!string

			- if (versionInfo["subPackages"].opt!(Json[]).length)
				dt Sub packages:
				dd.wrap
					- string[] subs;
					- foreach (sp; versionInfo["subPackages"])
						- auto name = sp["name"].get!string;
						- auto sub = "<span class=\"light\">" ~ packageName ~ ":</span>" ~ name;
						- subs ~= "<a class=\"blind\" href=\"" ~ req.rootDir ~ "packages/" ~urlEncode(packageName ~ ":" ~ name) ~ "\">" ~ sub ~ "</a>";
					|!= join(subs, ", ")

			dt Dependencies:
			dd.wrap
				- auto pd = "dependencies" in versionInfo;
				- if (pd && pd.length)
					- string[] deps;
					- foreach(string dep, unused; (*pd))
						- deps ~= "<a class=\"blind\" href=\"" ~ req.rootDir ~ "packages/" ~urlEncode(dep) ~ "\">" ~ dep ~ "</a>";
					|!= join(deps, ", ")
				- else
					|  none

			- if (auto ps = "systemDependencies" in versionInfo)
				dt System dependencies:
				dd.wrap= ps.get!string

			dt Versions:
			dd#versions
				- size_t counter;
				table
					- foreach_reverse(v; packageInfo["versions"])
						- if(counter >= 5)
							- break;
						- ++counter;
						- auto vs = v["version"].get!string;
						tr
							- if (vs == versionInfo["version"])
								td
									strong= vs
								td
									span= formatDate(v["date"])
							- else
								td
									a.blind(href='#{req.rootDir}packages/#{urlEncode(packageName)}/#{vs}')
										|= vs
								td
									span= formatDate(v["date"])
				span#showAll
					a.blind(href="#{req.rootDir}packages/#{urlEncode(packageName)}/versions")
						| Show all #{packageInfo["versions"].length} versions

			- auto stats = registry.getPackageStats(normalizedPackageName);

			dt Download Stats:
			dd#stats
				ul.unmarkedList
					li
						p
							strong= stats.downloads.daily
							|  downloads today
					li
						p
							strong= stats.downloads.weekly
							|  downloads this week
					li
						p
							strong= stats.downloads.monthly
							|  downloads this month
					li
						p
							strong= stats.downloads.total
							|  downloads total

			dt Score:
			dd#score(title="#{formatPackageStats(stats)}")!= formatScore(stats.score)

			dt Short URL:
				dd
					a(href="http://#{packageName}.dub.pm", target="_blank") #{packageName}.dub.pm

	script(type="application/javascript", src="/scripts/clipboard.min.js")
	:javascript
		new Clipboard('.btn-clipboard');
